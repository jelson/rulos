#!/usr/bin/env python3
#
# Copyright (C) 2009 Jon Howell (jonh@jonh.net) and Jeremy Elson
# (jelson@gmail.com).
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

import sys
sys.path.insert(0, "../../util")
from build_tools import *

apps = [
    {
        'name': 'gps-test-rig',
        'board': 'BOARD_GPS_TEST_RIG_REV_B',
        'extra_sources': ["ina219.c","curr_meas.c"],
        'chip': 'stm32g0b1xe',
    },
    {
        'name': 'ltetag-dev1',
        'board': 'BOARD_LTETAG_DEV_REV_A',
        'extra_sources': ["ina219.c","curr_meas.c"],
        'extra_cflags': [
            "-DRULOS_UART1_RX_PIN=GPIO_A15",
            "-DRULOS_UART4_RX_PIN=GPIO_B4",
        ],
        'chip': 'stm32g0b1xe',
    },
    {
        'name': 'gemini-logger',
        'board': 'BOARD_GEMINI_DATALOGGER_REV_A',
        'chip': 'stm32g0b1xe',
        'extra_sources': ["curr_meas.c"],
    },
    {
        'name': 'solo-logger',
        'board': 'BOARD_SOLO_LOGGER_REV_A',
        'chip': 'stm32g031x6',
        'sizes': {
            'max_line_len': 256,
            'tx_queue_len': 128,
            'rx_queue_len': 1536,
        },
        'extra_cflags': [
            "-DRULOS_UART0_RX_PIN=GPIO_B7",
            "-DRULOS_UART0_TX_PIN=GPIO_B6",
        ],
    },
    {
        'name': 'lora-logger',
        'board': 'BOARD_LORA_LOGGER_REV_A',
        'extra_sources': ["ina219.c","curr_meas.c"],
        'chip': 'stm32g0b1xe',
        'sizes': {
            'max_line_len': 256,
            'tx_queue_len': 128,
            'rx_queue_len': 16384,
        },        
        'extra_cflags': [
            "-DRULOS_UART0_RX_PIN=GPIO_B7",
            "-DRULOS_UART0_TX_PIN=GPIO_B6",
        ],
    },    
]

for app in apps:
    sizes = {
        'max_line_len': 512,
        'tx_queue_len': 256,
        'rx_queue_len': 8192,
    }
    sizes.update(app.get('sizes',{}))

    RulosBuildTarget(
        name = app['name'],

        sources = app.get('extra_sources', []) + [
            "flash_dumper.c",
            "serial_reader.c",
            f"{app['name']}.c",
        ],
        platforms = [ArmStmPlatform(app['chip'])],
        peripherals = "uart sdcard2 fatfs",
        extra_cflags = app.get('extra_cflags', []) + [
            f"-D{app['board']}",
            "-DLOG_TO_SERIAL",
            f"-DLINEREADER_MAX_LINE_LEN={sizes['max_line_len']}",
            f"-DUART_TX_QUEUE_LEN={sizes['tx_queue_len']}",
            f"-DUART_RX_QUEUE_LEN={sizes['rx_queue_len']}",

            # don't use these DMA channels for UART RX, since they're
            # used by the SD card
            "-DUART_SURRENDER_DMA1_CHAN2_3",
        ],
    ).build()
